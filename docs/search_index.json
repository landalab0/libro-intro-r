[["index.html", "Bienvenid@s al Taller de Introducción a R Chapter 1 🧪 Bienvenid@s 1.1 📚 Sobre el taller 1.2 🧰 ¿Qué aprenderás? 1.3 📁 Estructura del repositorio 1.4 🌐 Plataforma 1.5 🙌 Agradecimientos 1.6 💬 ¿Dudas o comentarios?", " Bienvenid@s al Taller de Introducción a R LandaLab :) 2025-07-29 Chapter 1 🧪 Bienvenid@s Este repositorio contiene el material del taller “Introducción a R”, un espacio abierto para todas las personas que quieran aprender a analizar y visualizar datos con R. No importa tu edad, formación o experiencia previa: si tienes curiosidad y ganas de aprender, este taller es para ti. 1.1 📚 Sobre el taller Lenguaje: R Nivel: Principiante Modalidad: Práctico, con ejercicios guiados y codificación en vivo Dirigido a: Cualquier persona interesada en aprender, sin importar su área de estudio o profesión Requisitos: Ninguno. No necesitas saber programación ni instalar ningún programa. Solo necesitas una computadora con acceso a internet 1.2 🧰 ¿Qué aprenderás? Al finalizar el taller, podrás: Navegar la interfaz de RStudio en línea Importar, explorar y transformar datos con tidyverse Crear gráficos básicos con ggplot2 Escribir scripts reproducibles Comprender los principios básicos del análisis de datos en R 1.3 📁 Estructura del repositorio 📂 datos/ # Conjuntos de datos utilizados en el taller 📂 scripts/ # Scripts con ejemplos y ejercicios 📂 presentaciones/ # Diapositivas del taller 📂 ejercicios/ # Actividades opcionales para practicar más 📄 README.md # Este archivo :) 1.4 🌐 Plataforma Trabajaremos en una plataforma en línea, por lo que no necesitas instalar nada en tu computadora. El acceso será gratuito y se proporcionará durante el taller. 1.5 🙌 Agradecimientos Este taller es parte de un esfuerzo por compartir herramientas abiertas, accesibles y colaborativas. Queremos que más personas se acerquen al mundo de los datos y la ciencia sin barreras. ¡Gracias por formar parte! 1.6 💬 ¿Dudas o comentarios? Puedes abrir un Issue o escribirnos durante el taller. ¡Estamos aquí para aprender junt@s! "],["conociendo-a-r.html", "Chapter 2 CONOCIENDO A R 2.1 Contenido 2.2 ¿Qué es R?🤨 2.3 Ventajas de trabajar con R 2.4 ¿Qué es R Studio? 2.5 ¿Y si aún no tengo R?🥲 2.6 Descubriendo RStudio 2.7 Tener un diálogo con R 2.8 Tipos de datos 2.9 Estructuras de datos", " Chapter 2 CONOCIENDO A R 2.1 Contenido En esta unidad, conoceremos una una herramienta R , la instalación del programa y funciones que podemos llevar a cabo con herramientas que este programa nos proporciona. 2.2 ¿Qué es R?🤨 Es un lenguaje de programación de software libre, que funciona en sistemas operativos como Windows, MacOS y linux. (Universidad Intyernacional de Valencia,2023) R está especializado en informática estadística y gráfica. 2.3 Ventajas de trabajar con R El código R es reproducible R produce gráficos de alta calidad R tiene una gran comunidad R es interdisciplinario R funciona con datos de todos los colores y tamaños. ¡R es gratis! 2.4 ¿Qué es R Studio? RStudio es un entorno de desarrolllo integrado (IDE por sus siglas en inglés) para R, que facilita la tarea de uso interactivo de R y la programación de scripts. Proporciona una iinterfaz de usuario amigable que facilita la escritura, depurado y la visualización de código R. 2.5 ¿Y si aún no tengo R?🥲 No te preocupes, solo seguiremos unos cuantos pasos para poder instalarlo. Primero instalaremos R: https://cran.rstudio.com/ Entraremos al link y seleccionaremos la descarga para nuestro sistema operativo. Pink and beige Data Visualization Basics modern presentation Cuando lo hayamos elegido seleccionaremos la opción intall R for the first time y después lo podremos descargar. Después podremos descargar R Studio: https://posit.co/download/rstudio-desktop/ 2.6 Descubriendo RStudio Después de instalar RStudio, podemos abrirlo y lo que nos encontraremos son cuatro páneles de trabajo. 1. Consola: se encuentra en la esquina inferiror izquierda: es el lugar en donde R está esperando a que le digas que hacer. En ella se puede escribir, ejecutar código y ver los resultados de lo que se va ejecutando. 2. Editor de código: ubicado en la esquina superior izquierda. En este panel se abren los archivos en pestañas. 3. Environment/History: 4. Files/Plots/Packages/Help: 2.7 Tener un diálogo con R Existen dos formas con las que podemos interactuar con R en RStudio: - Usando la consola. - Creación y edición de archivos de script. La consola es en donde se pueden escribir y ejecutar comandos inmediatamente, asímismo aquí se mostraran los resultados de los comandos ejecutados. Si R está listo para aceptar comandos, la consola mostrará el “&gt;” mensaje. Puedes escribir instrucciones directamente en la consola y presionar Enter, pero se olvidarán cuando cierre la sesión. Sabemos que los humanos olvidamos muchas cosas, por lo tanto, es importante hacer anotaciones para no olvidar. En en el caso de R, podemos hacer comentarios poniendo “#” antes del texto, y con esto podríamos recordarr porque escribimos un comando en nuestro script. getwd nos mostrará el directorio de trabajo 2.8 Tipos de datos Hay 5 tipos de datos en RStudio - Numérico (numeric o double): numeros enteros como decimales. x &lt;- 5 y &lt;- 3.14 Enteros (integer): Representa números enteros typeof(5L) ## [1] &quot;integer&quot; Lógicos (logical): True or False typeof(&quot;addition&quot; == &quot;subtraction&quot;) ## [1] &quot;logical&quot; Caracteres (character): Secuencias de caracteres, como texto. Los caracteres representan variables cualitativas, en R todo texto debe estar escrito entre comillas (“” o ’’). result &lt;- &quot;4 and 3 are not the same on Earth. On Mars maybe... &quot; typeof(result) ## [1] &quot;character&quot; Complejos: Números complejos con partes real e imaginaria. typeof(72+5i) ## [1] &quot;complex&quot; R provee varias funciones para examinar las características de los objetos que creamos. class() : ¿qué tipo de objeto es? typeof() : ¿qué tipo de dato es? length() : ¿de que tamaño es (cuantos elementos tienen los vectores y listas)? attributes() : ¿tiene el objeto algún metadato? 2.9 Estructuras de datos Existen diferentes maneras de organizar los datos en R llamados estructuras de datos. Las colecciones o conjunto de datos en R se organizan por su dimensión (1, 2, o varias dimensiones) y si son homogéneas (todos los objetos deben ser del mismo tipo) o heterogéneas ( el contenido puede ser de diferentes tipos).Las más utilizadas son: Dimensión Homogénea Heterogénea 1 Vector Lista 2 Matriz Data Frame n Array 2.9.1 🟢 Vector La estructura de datos más simple es el vector, que es una secuencia de datos del mismo tipo. Podemos crear un vestor usando la función “c()” que signifca concatenar o combinar. Input char_vector &lt;- c(&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;c&quot;, &quot;c&quot;) typeof(char_vector) ## [1] &quot;character&quot; Output 2.9.2 🟡 Factor El factor es una estructura más compleja, que contiene los nombres de categorías (llamadas niveles) y una secuencia de las ocurrencias de esas categorías. Input char_factor &lt;- as.factor(char_vector) char_factor ## [1] a a b b c c ## Levels: a b c Output Y si queremos sabwe la estructura de este objeto, pondríamos: Input str(char_factor) ## Factor w/ 3 levels &quot;a&quot;,&quot;b&quot;,&quot;c&quot;: 1 1 2 2 3 3 Output Podemos ver los niveles de los factores y la secuencia de números. Cada número representa un nivel, y esta secuencia contiene la información sobre qué va en cada posición. Por eso obtendremos un “entero” si preguntamos por el tipo de datos del objeto. Input typeof(char_factor) ## [1] &quot;integer&quot; Output Los factores son la mejor manera para organizar datos categóricos. 2.9.3 🟣 Lista A diferencia de una vector, la lista es el conjunto de elementos de distinto tipo. Se crean con la función list lista &lt;- list(nombre = &quot;Juan&quot;, edad = 30, casado = TRUE) 2.9.4 🟠 Matriz Es una estructura bidimensional con filas y columnas, donde todos los elementos son del mismo tipo. La función matrix() permite crear matrices #Crear una matriz matriz &lt;- matrix(1:6, nrow = 2, ncol = 3) 2.9.5 🔵 Data Frame Es una estructura de datos bidimensional similar a una matriz, pero funciona distinto. Un data frame es una lista de vectores de la misma longitud, permite tipos de datos mixtos. Esto permite almacenar diferentes tipos de variables. Cada columna puede contener distintos tipos de datos. #Crear un data frame Input df &lt;- data.frame( nombre = c(&quot;Juan&quot;, &quot;María&quot;, &quot;Pedro&quot;), edad = c(30, 25, 35), casado = c(TRUE, FALSE, TRUE)) #Ver el data frame print(df) ## nombre edad casado ## 1 Juan 30 TRUE ## 2 María 25 FALSE ## 3 Pedro 35 TRUE "],["qué-es-tidyverse.html", "Chapter 3 ¿Qué es Tidyverse? 3.1 El pipe %&gt;% 3.2 Verbos principales de dplyr 3.3 Ejemplo con tabla interna de R: mtcars 3.4 Importar una tabla de Excel 3.5 Filtrar o buscar datos específicos 3.6 Cierre", " Chapter 3 ¿Qué es Tidyverse? El Tidyverse es una colección de paquetes en R diseñados para la ciencia de datos. Permite leer, transformar, visualizar y analizar datos de forma clara y coherente. Incluye varios paquetes, pero los más comunes son: readr y readxl para importar datos dplyr para manipular tablas ggplot2 para visualización tidyr para ordenar datos tibble para trabajar con data frames modernos 3.1 El pipe %&gt;% Uno de los elementos clave del tidyverse es el pipe (%&gt;%), que permite encadenar funciones de manera clara y secuencial. Por ejemplo: library(tidyverse) ## ── Attaching core tidyverse packages ──────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.4 ✔ readr 2.1.5 ## ✔ forcats 1.0.0 ✔ stringr 1.5.1 ## ✔ ggplot2 3.5.1 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.4 ✔ tidyr 1.3.1 ## ✔ purrr 1.0.2 ## ── Conflicts ────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors mtcars %&gt;% head() ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 3.2 Verbos principales de dplyr dplyr usa una gramática simple para transformar tablas. Sus verbos principales son: filter() – selecciona filas select() – selecciona columnas mutate() – crea nuevas columnas summarise() – resume información group_by() – agrupa datos (usualmente usado con summarise()) 3.3 Ejemplo con tabla interna de R: mtcars # Ver las primeras filas mtcars %&gt;% head() ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 # Seleccionar columnas específicas mtcars %&gt;% select(mpg, cyl, hp) ## mpg cyl hp ## Mazda RX4 21.0 6 110 ## Mazda RX4 Wag 21.0 6 110 ## Datsun 710 22.8 4 93 ## Hornet 4 Drive 21.4 6 110 ## Hornet Sportabout 18.7 8 175 ## Valiant 18.1 6 105 ## Duster 360 14.3 8 245 ## Merc 240D 24.4 4 62 ## Merc 230 22.8 4 95 ## Merc 280 19.2 6 123 ## Merc 280C 17.8 6 123 ## Merc 450SE 16.4 8 180 ## Merc 450SL 17.3 8 180 ## Merc 450SLC 15.2 8 180 ## Cadillac Fleetwood 10.4 8 205 ## Lincoln Continental 10.4 8 215 ## Chrysler Imperial 14.7 8 230 ## Fiat 128 32.4 4 66 ## Honda Civic 30.4 4 52 ## Toyota Corolla 33.9 4 65 ## Toyota Corona 21.5 4 97 ## Dodge Challenger 15.5 8 150 ## AMC Javelin 15.2 8 150 ## Camaro Z28 13.3 8 245 ## Pontiac Firebird 19.2 8 175 ## Fiat X1-9 27.3 4 66 ## Porsche 914-2 26.0 4 91 ## Lotus Europa 30.4 4 113 ## Ford Pantera L 15.8 8 264 ## Ferrari Dino 19.7 6 175 ## Maserati Bora 15.0 8 335 ## Volvo 142E 21.4 4 109 # Filtrar autos con más de 100 caballos de fuerza mtcars %&gt;% filter(hp &gt; 100) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 # Crear una nueva columna mtcars %&gt;% mutate(kpl = mpg * 0.425) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 ## kpl ## Mazda RX4 8.9250 ## Mazda RX4 Wag 8.9250 ## Datsun 710 9.6900 ## Hornet 4 Drive 9.0950 ## Hornet Sportabout 7.9475 ## Valiant 7.6925 ## Duster 360 6.0775 ## Merc 240D 10.3700 ## Merc 230 9.6900 ## Merc 280 8.1600 ## Merc 280C 7.5650 ## Merc 450SE 6.9700 ## Merc 450SL 7.3525 ## Merc 450SLC 6.4600 ## Cadillac Fleetwood 4.4200 ## Lincoln Continental 4.4200 ## Chrysler Imperial 6.2475 ## Fiat 128 13.7700 ## Honda Civic 12.9200 ## Toyota Corolla 14.4075 ## Toyota Corona 9.1375 ## Dodge Challenger 6.5875 ## AMC Javelin 6.4600 ## Camaro Z28 5.6525 ## Pontiac Firebird 8.1600 ## Fiat X1-9 11.6025 ## Porsche 914-2 11.0500 ## Lotus Europa 12.9200 ## Ford Pantera L 6.7150 ## Ferrari Dino 8.3725 ## Maserati Bora 6.3750 ## Volvo 142E 9.0950 # Calcular el promedio de millas por galón por número de cilindros mtcars %&gt;% group_by(cyl) %&gt;% summarise(prom_mpg = mean(mpg)) ## # A tibble: 3 × 2 ## cyl prom_mpg ## &lt;dbl&gt; &lt;dbl&gt; ## 1 4 26.7 ## 2 6 19.7 ## 3 8 15.1 3.4 Importar una tabla de Excel Para importar datos desde Excel usamos el paquete readxl: library(readxl) # Cargar archivo de Excel (reemplaza con la ruta real) datos &lt;- read_excel(&quot;ejemplo_datos.xlsx&quot;) # Ver los primeros datos head(datos) ## # A tibble: 5 × 3 ## nombre descripcion valor ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Juan agua dulce 10 ## 2 Ana agua salada 20 ## 3 Juan fuego 30 ## 4 Luis aire 40 ## 5 María agua y tierra 50 3.5 Filtrar o buscar datos específicos # Filtrar filas donde la columna &#39;nombre&#39; es &#39;Juan&#39; datos %&gt;% filter(nombre == &quot;Juan&quot;) ## # A tibble: 2 × 3 ## nombre descripcion valor ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Juan agua dulce 10 ## 2 Juan fuego 30 # Buscar filas que contienen &#39;agua&#39; en la columna &#39;descripcion&#39; datos %&gt;% filter(str_detect(descripcion, &quot;agua&quot;)) ## # A tibble: 3 × 3 ## nombre descripcion valor ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Juan agua dulce 10 ## 2 Ana agua salada 20 ## 3 María agua y tierra 50 3.6 Cierre Con estas herramientas básicas puedes comenzar a trabajar tus propios datos usando tidyverse. Recuerda: la práctica y la curiosidad son claves para aprender. "],["qué-es-ggplot2.html", "Chapter 4 ¿Qué es ggplot2? 4.1 Añadir color por cilindros 4.2 Cambiar tipo de gráfico: líneas, boxplots, histogramas 4.3 Conclusión", " Chapter 4 ¿Qué es ggplot2? ggplot2 es un paquete del Tidyverse para crear visualizaciones de datos de forma elegante, flexible y basada en una gramática clara. La estructura básica de un gráfico en ggplot2 es: ggplot(data) + aes(x = ..., y = ...) + geom_... Donde: ggplot(data) indica el dataset aes() define los ejes o variables estéticas (x, y, color, etc.) geom_* determina el tipo de gráfico Primer gráfico: mtcars Usamos el dataset mtcars, disponible por defecto en R. library(tidyverse) # Gráfico de dispersión: peso vs. millas por galón ggplot(mtcars) + aes(x = wt, y = mpg) + geom_point() 4.1 Añadir color por cilindros Podemos mejorar el gráfico agregando color: ggplot(mtcars) + aes(x = wt, y = mpg, color = factor(cyl)) + geom_point() + labs( title = &quot;Relación entre peso y rendimiento de autos&quot;, x = &quot;Peso (wt)&quot;, y = &quot;Millas por galón (mpg)&quot;, color = &quot;Cilindros&quot; ) + theme_minimal() 4.2 Cambiar tipo de gráfico: líneas, boxplots, histogramas Algunos ejemplos rápidos: # Histograma de millas por galón ggplot(mtcars) + aes(x = mpg) + geom_histogram(binwidth = 2, fill = &quot;steelblue&quot;, color = &quot;white&quot;) # Boxplot de mpg por número de cilindros ggplot(mtcars) + aes(x = factor(cyl), y = mpg) + geom_boxplot(fill = &quot;skyblue&quot;) + labs(x = &quot;Cilindros&quot;, y = &quot;Millas por galón&quot;) 4.3 Conclusión ggplot2 te permite explorar datos de forma gráfica y reproducible. Con solo cambiar el tipo de geom_* puedes obtener visualizaciones potentes para entender mejor tus datos. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
